/*Hash Table*/
/*1.*/
#include <stdio.h>
#include<stdlib.h>
#define MAX 10
struct Record
{
 int data;
 struct Record *link;
};

void insert(int id, struct Record *hash_table[]);
int search_element(int key, struct Record *hash_table[]);
void remove_record(int key, struct Record *hash_table[]);
void show(struct Record *hash_table[]);
int hash_function(int key);

int main()
{
 struct Record *hash_table[MAX];
 int count, key, option,id;

 for(count = 0; count <= MAX - 1; count++)
 {
 hash_table[count] = NULL;
 }
 while(1)
 {
 printf("1. Insert a Record in Hash Table\n");
 printf("2. Search for a Record\n");
 printf("3. Delete a Record\n");
 printf("4. Show Hash Table\n");
 printf("5. Quit\n");
 printf("Enter your option\n");
 scanf("%d",&option);
 switch(option)
 {
 case 1:
 printf("Enter the number:\t");
 scanf("%d", &id);
 insert(id, hash_table);
 break;
 case 2:
 printf("Enter the element to search:\t");
 scanf("%d", &key);
 count = search_element(key, hash_table);
 if(count == -1)
 { 
 printf("Element Not Found\n");
 }
 else
 {
 printf("Element Found in Chain:\t%d\n", count);
 }
 break;
 case 3:
 printf("Enter the element to delete:\t");
 scanf("%d", &key);
 remove_record(key, hash_table);
 break;
 case 4:
 show(hash_table);
 break;
 case 5:
 exit(1);
 }
 }
 return 0;
}

void insert(int id, struct Record *hash_table[])
{
 int key, h;
 struct Record *temp;
 key = id;
 if(search_element(key, hash_table) != -1)
 {
 printf("Duplicate Key\n");
 return;
 }
 h = hash_function(key);
 temp = malloc(sizeof(struct Record));
 temp->data = id;
 temp->link = hash_table[h];
 hash_table[h] = temp;

}

void show(struct Record *hash_table[])
{
 int count;
 struct Record *ptr;
 for(count = 0; count < MAX; count++)
 {
 printf("\n[%3d]", count); 
 if(hash_table[count] != NULL)
 {
 ptr = hash_table[count];
 while(ptr != NULL)
 {
 printf("%d \t", ptr->data);
 ptr=ptr->link;
 }
 }
 }
 printf("\n");
}

int search_element(int key, struct Record *hash_table[])
{
 int h;
 struct Record *ptr;
 h = hash_function(key);
 ptr = hash_table[h];
 while(ptr != NULL)
 {
 if(ptr->data == key)
 {
 return h;
 }
 ptr = ptr->link;
 }
 return -1;
}

void remove_record(int key, struct Record *hash_table[])
{
 int h;
 struct Record *temp, *ptr;
 h = hash_function(key);
 if(hash_table[h]==NULL)
 {
 printf("Key %d Not Found\n", key);
 return;
 }
 if(hash_table[h]->data == key)
 {
 temp = hash_table[h];
 hash_table[h] = hash_table[h]->link;
 free(temp);
 return;
 } 
 ptr = hash_table[h];
 while(ptr->link != NULL)
 {
 if(ptr->link->data == key)
 {
 temp = ptr->link;
 ptr->link = temp->link;
 free(temp);
 return;
 }
 ptr = ptr->link;
 }
 printf("Key %d Not Found\n", key);
}

int hash_function(int key)
{
 return (key % MAX);
} 

/*

output :

1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	35
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	26
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	12
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	24
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	43
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	38
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	37
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	41
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	22
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	11
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
1
Enter the number:	15
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
4

[  0]
[  1]11 	41 	
[  2]22 	12 	
[  3]43 	
[  4]24 	
[  5]15 	35 	
[  6]26 	
[  7]37 	
[  8]38 	
[  9]
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
2
Enter the element to search:	35
Element Found in Chain:	5
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
3
Enter the element to delete:	38
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
4

[  0]
[  1]11 	41 	
[  2]22 	12 	
[  3]43 	
[  4]24 	
[  5]15 	35 	
[  6]26 	
[  7]37 	
[  8]
[  9]
1. Insert a Record in Hash Table
2. Search for a Record
3. Delete a Record
4. Show Hash Table
5. Quit
Enter your option
5

*/

/*Hash Table*/
/*2.*/
#include <stdio.h>
#include<stdlib.h>
#include<string.h>

#define MAX 10
struct Record
{
 int data;
 struct Record *link;
};

void insert(int id, struct Record *hash_table[]);
int search_element(int key, struct Record *hash_table[]);
void show(struct Record *hash_table[]);
int hash_function(int key);

int main()
{
 struct Record *hash_table[MAX];
 int count, key, option;
 char id[10];

 for(count = 0; count <= MAX - 1; count++)
 {
 hash_table[count] = NULL;
 }
 while(1)
 {
 printf("1. Insert a Record in Hash Table\n");
 printf("2. Show Hash Table\n");
 printf("3. Quit\n");
 printf("Enter your option\n");
 scanf("%d",&option);
 switch(option)
 {
 case 1:
 	{
		printf("Enter the string:\t");
 		scanf("%s", id);
		int sum = 0;
		int c = 0;
		for(int i=0;i<strlen(id);i++)
		{
			sum+=((int)id[i]*(i+1));
		}
		c = sum % 2069;
 		insert(c, hash_table);
 		break;
	}
 case 2:
 show(hash_table);
 break;
 case 3:
 exit(1);
 }
 }
 return 0;
}

void insert(int id, struct Record *hash_table[])
{
 int key, h;
 struct Record *temp;
 key = id;
 if(search_element(key, hash_table) != -1)
 {
 printf("Duplicate Key\n");
 return;
 }
 h = hash_function(key);
 temp = malloc(sizeof(struct Record));
 temp->data = id;
 temp->link = hash_table[h];
 hash_table[h] = temp;

}

int search_element(int key, struct Record *hash_table[])
{
 int h;
 struct Record *ptr;
 h = hash_function(key);
 ptr = hash_table[h];
 while(ptr != NULL)
 {
 if(ptr->data == key)
 {
 return h;
 }
 ptr = ptr->link;
 }
 return -1;
}


void show(struct Record *hash_table[])
{
 int count;
 struct Record *ptr;
 for(count = 0; count < MAX; count++)
 {
 printf("\n[%3d]", count); 
 if(hash_table[count] != NULL)
 {
 ptr = hash_table[count];
 while(ptr != NULL)
 {
 printf("%d \t", ptr->data);
 ptr=ptr->link;
 }
 }
 }
 printf("\n");
}



int hash_function(int key)
{
 return (key % MAX);
} 

/*
output : 

1. Insert a Record in Hash Table
2. Show Hash Table
3. Quit
Enter your option
1
Enter the string:	abcdef
1. Insert a Record in Hash Table
2. Show Hash Table
3. Quit
Enter your option
1
Enter the string:	bcdefa
1. Insert a Record in Hash Table
2. Show Hash Table
3. Quit
Enter your option
1
Enter the string:	cdefab
1. Insert a Record in Hash Table
2. Show Hash Table
3. Quit
Enter your option
1
Enter the string:	defabc
1. Insert a Record in Hash Table
2. Show Hash Table
3. Quit
Enter your option
2

[  0]
[  1]defabc 	
[  2]
[  3]bcdefa 	
[  4]cdefab 	
[  5]
[  6]
[  7]
[  8]abcdef 	
[  9]
1. Insert a Record in Hash Table
2. Show Hash Table
3. Quit
Enter your option
3





*/
