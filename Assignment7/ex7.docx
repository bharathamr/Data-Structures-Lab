/*Expression Tree*/

/*stack.h*/

typedef char elementtype;
struct stackrecord
{
	int capacity;
	char topofstack;
	elementtype *array;
};
typedef struct stackrecord* stack;

stack createstack(int max)
{
	stack s;
	if(max < 3)
		printf("stack size is too small");
	s = malloc(sizeof(struct stackrecord));
	s -> array = malloc(sizeof(elementtype)*max);
	s -> capacity = max;
	return s;
}

int isempty(stack s)
{
	return s->topofstack == NULL;
}

void push(char x,stack s)
{
	if(isfull(s))
		printf("the stack is full");
	else
	    s -> array[++s -> topofstack] = x;
}

void pop(stack s)
{
	if(isempty(s))
		printf("empty stack");
	else
		s -> topofstack--;
}

char top(stack s)
{
	if(!isempty(s))
		return s -> array[s -> topofstack];
	printf("Empty stack");
	return '\0';
}

int isfull(stack s)
{
	return s -> topofstack == s -> capacity;
}

char* conv(char *exp)
{
	char *pr;
	pr = (char*)malloc(50*sizeof(char));
	stack ex = createstack(strlen(exp));
	int j=0;
	for(int i=0; exp[i]; ++i)
	{
		if(isdigit(exp[i]) || exp[i] > 64 && exp[i] < 91 || exp[i] > 96 && exp[i] < 123)
		{
			pr[j] = exp[i];
			j++;
		}
		else
		{
			if(exp[i] == '{' || exp[i] == '[' || exp[i] == '(' || exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/')
			{
				push(exp[i],ex);
			}
			else
			{
			    if(exp[i] == '}')
			    {
			        char o;
			    	while((o = top(ex)) != '{' && !isempty(ex))
			    	{
                    	              pr[j] = o;
                    	              j++;
                    	              pop(ex);
			    	}
			    	pop(ex);
			    }
			    else
			    {
			    	if(exp[i] == ']')
			    	{
			        	char o;
			    		while((o = top(ex)) != '[' && !isempty(ex) )
			    		{
                    		              pr[j] = o;
                    		              j++;
                    		              pop(ex);
			    		}
			    		pop(ex);
			        }
			    	else
			    	{
			    		if(exp[i] == ')')
			    		{
			    			char o;
			    			while((o = top(ex)) != '(' && !isempty(ex) )
			    			{
                    			            pr[j] = o;
                    			            j++;
                    			            pop(ex);
			    			}
			    			pop(ex);
			    	    }

			        }  
                           }
			}
		}
	}
	while(isempty(ex) != 1 )
	{
		if(top(ex) == '+' || top(ex) == '-' || top(ex) == '*' || top(ex) == '/')
		{
        	pr[j] = top(ex);
        	j++;
        	pop(ex);
                }
                else
                {
        	pr[0] = '\0';
                break;
                }
	}
	pr[j] = '\0';
	return pr;
}

/*treestack.h*/

#include<stdio.h>
#include<stdlib.h>

typedef struct et
{
	char data;
	struct et *left, *right;
}et;

et* createTreeNode()
{
	et *t = (et *) malloc(sizeof(et));
	t->left = NULL;
	t->right = NULL;
	return t;
}

typedef struct treeStack
{
	et* data;
	struct treeStack *link;
}treeStack;

treeStack *createEmptyStack()
{
	treeStack *s = (treeStack *)malloc(sizeof(treeStack));
	s->link = NULL;
    s->data = NULL;
}

int isTreeEmpty(treeStack *s)
{
    return (s->link == NULL);
}

void treePush(treeStack *s, et *data)
{
	treeStack *node = (treeStack *)malloc(sizeof(treeStack));
	node->data = data;
	node->link = s->link;
	s->link = node;
}

et * treePop(treeStack *s)
{
    if(!isTreeEmpty(s))
    {
	    treeStack *node = (treeStack *)malloc(sizeof(treeStack));
	    node = s->link;
	    s->link = s->link->link;
	    et *data = (et*)malloc(sizeof(et));
        data = node->data;
	    free(node);
	    return data;
    }
    else
    {
        printf("\ntreeStack is empty. Cannot pop elements.\n");
        return NULL;
    }   
}

int isOperator(char c)
{
	if(c=='+' || c=='-' || c=='*' || c=='/' || c=='^')
		return 1;
	return 0; 
}

et *toExpressionTree(char *postfix)
{ 
    treeStack *s = createEmptyStack();
	et *t = createTreeNode();

	for(int i=0; postfix[i]!='\0'; i++)
	{
		et *node = createTreeNode();
		node->data = postfix[i];
		if(isOperator(postfix[i]))
		{
			node->right = treePop(s);
			node->left = treePop(s);
		}
        treePush(s, node);
	}
    t = treePop(s);
    return t;
}

/*main*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include"stack.h"
#include"treestack.h"

void preorder(et* t)
{
	if(t!=NULL)
	{
		printf("%c",t->data);
		preorder(t->left);
		preorder(t->right);
	}
}

void inorder(et *t)
{
	if(t!=NULL)
	{
		inorder(t->left);
		printf("%c",t->data);
		inorder(t->right);
	}
}

void postorder(et *t)
{
	if(t!=NULL)
	{
		postorder(t->left);
		postorder(t->right);
		printf("%c",t->data);
	}
}

int main()
{
	char express[50],*eq;
        int cont;
        do
        {
		printf("Enter the infix expression");
		scanf("%s",express);
		eq = conv(express);
		printf("%s\n",eq);
		et *r = toExpressionTree(eq);
		printf("\nPreorder traversal : ");
		preorder(r);
		printf("\nInorder traversal : ");
		inorder(r);
		printf("\nPostorder traversal : ");
		postorder(r);
		printf("\n");
		printf("Enter 1: to continue 0 : to exit : ");
		scanf("%d",&cont);
        }while(cont!=0);
    return 0;
}

/*
output:

Enter the infix expression(2+5)*(3-6)/(7*8)
25+36-78*/*

Preorder traversal : *+25/-36*78
Inorder traversal : 2+5*3-6/7*8
Postorder traversal : 25+36-78*/*
Enter 1: to continue 0 : to exit : 1
Enter the infix expression7-(((3+2)*(6+1))/(5+6))
732+61+*56+/-

Preorder traversal : -7/*+32+61+56
Inorder traversal : 7-3+2*6+1/5+6
Postorder traversal : 732+61+*56+/-
Enter 1: to continue 0 : to exit : 1
Enter the infix expression((3+2)*(2+5))
32+25+*

Preorder traversal : *+32+25
Inorder traversal : 3+2*2+5
Postorder traversal : 32+25+*
Enter 1: to continue 0 : to exit : 0


*/


